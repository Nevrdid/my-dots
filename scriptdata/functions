#!/usr/bin/env bash
source ./scriptdata/ansi

function try { "$@" || sleep 0; }
function v() {
	echo "####################################################"
	echo "${blue}[$0]: Next command:${reset}"
	echo "${green}" "$@" "${reset}"
	execute=true
	if $ask; then
		while true; do
			echo "${blue}Execute? ${reset}"
			echo "  y = Yes"
			echo "  e = Exit now"
			echo "  s = Skip this command (NOT recommended - your setup might not work correctly)"
			echo "  yesforall = Yes and don't ask again; NOT recommended unless you really sure"
			read -rp "====> " p
			case $p in
			[yY])
				echo "${blue}OK, executing...${reset}"
				break
				;;
			[eE])
				echo "${blue}Exiting...${reset}"
				exit
				;;
			[sS])
				echo "${blue}Alright, skipping this one...${reset}"
				execute=false
				break
				;;
			"yesforall")
				echo "${blue}Alright, won't ask again. Executing...${reset}"
				ask=false
				break
				;;
			*) echo "${red}Please enter [y/e/s/yesforall].${reset}" ;;
			esac
		done
	fi
	if $execute; then x "$@"; else
		echo "${yellow}[$0]: Skipped \"" "$@" "\"${reset}"
	fi
}
# When use v() for a defined function, use x() INSIDE its definition to catch errors.
function x() {
	if "$@"; then cmdstatus=0; else cmdstatus=1; fi # 0=normal; 1=failed; 2=failed but ignored
	while [ $cmdstatus == 1 ]; do
		echo "${red}[$0]: Command \"${green}" "$@" "${red}\" has failed."
		echo "You may need to resolve the problem manually BEFORE repeating this command.${reset}"
		echo "  r = Repeat this command (DEFAULT)"
		echo "  e = Exit now"
		echo "  i = Ignore this error and continue (your setup might not work correctly)"
		read -rp " [R/e/i]: " p
		case $p in
		[iI])
			echo "${blue}Alright, ignore and continue...${reset}"
			cmdstatus=2
			;;
		[eE])
			echo "${blue}Alright, will exit.${reset}"
			break
			;;
		*)
			echo "${blue}OK, repeating...${reset}"
			if "$@"; then cmdstatus=0; else cmdstatus=1; fi
			;;
		esac
	done
	case $cmdstatus in
	0) echo "${blue}[$0]: Command \"${green}" "$@" "${blue}\" finished.${reset}" ;;
	1)
		echo "${red}[$0]: Command \"${green}" "$@" "${red}\" has failed. Exiting...${reset}"
		exit 1
		;;
	2) echo "${red}[$0]: Command \"${green}" "$@" "${red}\" has failed but ignored by user.${reset}" ;;
	esac
}
function showfun() {
	echo "${blue}[$0]: The definition of function \"$1\" is as follows:${reset}"
	echo -n "${green}"
	type -a "$1"
	echo "${reset}"
}
function remove_bashcomments_emptylines() {
	mkdir -p "$(dirname "$2")"
	sed -e '/^[[:blank:]]*#/d;s/#.*//' -e '/^[[:space:]]*$/d' "$1" >"$2"
}
function prevent_sudo_or_root() {
	case $(whoami) in
	root)
		echo "${red}[$0]: This script is NOT to be executed with sudo or as root. Aborting...${reset}"
		exit 1
		;;
	esac
}
