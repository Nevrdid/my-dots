#!/usr/bin/env bash

# Configurable environment variables:
NNN_SPLIT=${NNN_SPLIT:-}           # permanent split direction
NNN_TERMINAL=${NNN_TERMINAL:-}     # external terminal to be used
NNN_SPLITSIZE=${NNN_SPLITSIZE:-50} # previewer split size percentage
TMPDIR=${TMPDIR:-/tmp}             # location of temporary files
ENVVARS=(
	"PWD=$PWD"
	"NNN_FIFO=$NNN_FIFO"
	"FIFOPID=$TMPDIR/nnn-pager-fifopid"
	"FIFOPATH=$TMPDIR/nnn-pager-fifo"
	"PREVIEWPID=$TMPDIR/nnn-pager-previewpid"
	"CURSEL=$TMPDIR/nnn-pager-selection"
	"POSOFFSET=$TMPDIR/nnn-pager-posoffset"
)
pidkill() {
	if [ -f "$1" ]; then
		PID="$(cat "$1" 2>/dev/null)" || return 1
		kill "$PID" >/dev/null 2>&1
		RET=$?
		wait "$PID" 2>/dev/null
		return $RET
	fi
	return 1
}

start_preview() {
	if [ -e "${TMUX%%,*}" ] && tmux -V | grep -q '[ -][3456789]\.'; then
		NNN_TERMINAL=tmux
	else
		NNN_TERMINAL=foot
	fi
	ENVVARS+=("NNN_TERMINAL=$NNN_TERMINAL" "NNN_SPLIT=$NNN_SPLIT" "PREVIEW_MODE=1")

	case "$NNN_TERMINAL" in
	tmux) # tmux splits are inverted
		ENVVARS=("${ENVVARS[@]/#/-e}")
		tmux split-window -h -l"$NNN_SPLITSIZE"% "${ENVVARS[@]}" -p"$NNN_SPLITSIZE" "$0" "$1"
		;;
	foot) # Launching foot terminal
		ENVVARS=("${ENVVARS[@]/#/--env=}")
		foot -He "$0" "$1"
		;;
	esac
}

toggle_preview() {
	export "${ENVVARS[@]}"
	if pidkill "$FIFOPID"; then
		[ -p "$NNN_PPIPE" ] && printf "0" >"$NNN_PPIPE"
		pidkill "$PREVIEWPID"
		# Implement your toggle logic here
	else
		[ -p "$NNN_PPIPE" ] && printf "1" >"$NNN_PPIPE"
		start_preview "$1"
	fi
}

fifo_pager() {
	cmd="$1"
	shift
	mkfifo "$FIFOPATH" || return
	$NNN_PAGER <"$FIFOPATH" &
	printf "%s" "$!" >"$PREVIEWPID"
	(
		exec >"$FIFOPATH"
		"$cmd" "$@" &
	)
	rm -- "$FIFOPATH"

}

preview_file() {
	fifo_pager less "$1"
}

preview_fifo() {
	while read -r selection; do
		if [ -n "$selection" ]; then
			pidkill "$PREVIEWPID"
			preview_file "$selection"
			printf "%s" "$selection" >"$CURSEL"
		fi
	done <"$NNN_FIFO"
}

if [ "$PREVIEW_MODE" -eq 1 ] 2>/dev/null; then
	preview_file "$PWD/$1"
	preview_fifo &
	WAITPID=$!
	printf "%s" "$!" >"$FIFOPID"
	printf "%s" "$PWD/$1" >"$CURSEL"
	trap 'winch_handler' WINCH
	trap 'rm -- "$PREVIEWPID" "$CURSEL" "$FIFOPID" "$POSOFFSET" 2>/dev/null' INT HUP EXIT
	while kill -s 0 $WAITPID; do
		wait $WAITPID 2>/dev/null
	done
	exit 0
else
	if [ ! -r "$NNN_FIFO" ]; then
		prompt "No FIFO available! (\$NNN_FIFO='$NNN_FIFO')\nPlease read Usage in '$0'."
	else
		toggle_preview "$1" &
	fi
fi
