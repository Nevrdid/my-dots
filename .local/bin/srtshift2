#!/usr/bin/perl

## no critic: TestingAndDebugging::RequireUseStrict

our $AUTHORITY = 'cpan:PERLANCAR';       # AUTHORITY
our $DATE      = '2022-11-23';           # DATE
our $DIST      = 'App-SubtitleUtils';    # DIST
our $VERSION   = '0.012';                # VERSION

# secs_re is a regex to match a number in seconds format
$secs_re = qr/[+-]?\d+(?:\.\d*)?/;

# hms_re is a regex to match a number in hms format
$hms_re = qr/[+-]?\d\d?:\d\d?:\d\d?(?:,\d{1,3})?/;

# hms_re_catch is a regex to match a number in hms format, but with capturing
$hms_re_catch = qr/([+-]?)(\d\d?):(\d\d?):(\d\d?)(?:,(\d{1,3}))?/;

sub hms2secs {
    local $_ = shift;
    /^$hms_re_catch$/ or return;
    "${1}1" * ( $2 * 3600 + $3 * 60 + $4 + $5 * 0.001 );
}

sub secs2hms {
    local $_ = shift;
    /^$secs_re$/ or return "00:00:00,000";
    my $ms = 1000 * ( $_ - int($_) );
    $_ = int($_);
    my $s = $_ % 60;
    $_ = ($_ - $s) / 60;
    my $m = $_ % 60;
    $_ = ($_ - $m ) / 60;
    sprintf "%02d:%02d:%02d,%03d", $_, $m, $s, $ms;
}

sub tosecs {
    local $_ = shift;
    if    (/^$secs_re$/) { return $_ }
    elsif (/^$hms_re$/)  { return hms2secs($_) }
    else                 { die "FATAL: Invalid time `$_'\n" }
}

sub print_new {
    my ( $no, $hms1, $hms2, $text, $comment ) = @_;
    if (defined $comment) {
        print "{\\", $no, "\n", $hms1, " --> ", $hms2, "\n", $text, "}\n";
    } else {
        print $no, "\n", $hms1, " --> ", $hms2, "\n", $text, "\n";
    }
}

###

# get Options : [OPTIONS] -|+|<number> <file>
# -|+|<number> : shift all times by this number of seconds
# <file> : file to process
# OPTIONS:
# --start/-s : start time of the shift
# --end/-e : end time of the shift
# The unmoved subtitles in the overwriten area will be commented.

use Getopt::Long;
Getopt::Long::Configure("pass_through");
GetOptions(
    "start|s:s" => \$start,
    "end|e:s"   => \$end,
  )
  or die
  "Usage: $0 [--start/-s START_TIME] [--end/-e END_TIME] -|+|<number> <file>\n";

$|++;
die "Usage: $0 secs FILE\n" unless @ARGV >= 1;

$_          = shift @ARGV;
$secs_shift = tosecs($_);
$secs_start = tosecs($start) if defined $start;
$secs_end   = tosecs($end)   if defined $end;

$para  = "";
$lines = 1;
while (1) {
    $_ = <>;
    if ( /\S/ || $lines <= 2 ) {
        s/\015//g;
        $para .= $_;
        $lines++;
    }
    elsif ( $para =~ /\S/ ) {
        ( $no, $hms1, $hms2, $text ) =
          $para =~ /(\d+)\n($hms_re) ---?> ($hms_re)\n(.*)/s;
          #or die "FATAL: Invalid entry in line $.: $para\n";

     # If old time is outside the range, print the original time
     # If old time before start and after the newer start value, skipt the entry
     # If old time after end and before the newer end value, skipt the entry
     # If old time is inside the range, print the new time
        if (   ( defined $secs_start && hms2secs($hms1) < $secs_start - $secs_shift )
            || ( defined $secs_end && hms2secs($hms2) > $secs_end - $secs_shift ) )
        {
           print($para . "\n");
        }
        elsif (defined $secs_start
            && $secs_shift < 0
            && hms2secs($hms1) < $secs_start + $secs_shift )
        {
            next;
        }
        elsif (defined $secs_end
            && $secs_shift > 0
            && hms2secs($hms2) > $secs_end + $secs_shift )
        {
            next;
        }
        else {
            print_new(
                $no,
                secs2hms( hms2secs($hms1) + $secs_shift ),
                secs2hms( hms2secs($hms2) + $secs_shift ), $text
            );
        }
        $para = "";
    }
    else {
        $lines = 1;
        $para  = "";
    }
    last unless $_;
}

# ABSTRACT: Shift the times in .srt by a specified number of seconds
# PODNAME: srtshift

__END__

=pod

=encoding UTF-8

=head1 NAME

srtshift - Shift the times in .srt by a specified number of seconds

=head1 VERSION

This document describes version 0.012 of srtshift (from Perl distribution App-SubtitleUtils), released on 2022-11-23.

=head1 SYNOPSIS

 % srtshift <secs> [FILE] ...

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-SubtitleUtils>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-SubtitleUtils>.

=head1 HISTORY

2003-02-06 - first written

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 CONTRIBUTING


To contribute, you can send patches by email/via RT, or send pull requests on
GitHub.

Most of the time, you don't need to build the distribution yourself. You can
simply modify the code, then test via:

 % prove -l

If you want to build the distribution (e.g. to try to install it locally on your
system), you can install L<Dist::Zilla>,
L<Dist::Zilla::PluginBundle::Author::PERLANCAR>,
L<Pod::Weaver::PluginBundle::Author::PERLANCAR>, and sometimes one or two other
Dist::Zilla- and/or Pod::Weaver plugins. Any additional steps required beyond
that are considered a bug and can be reported to me.

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2022, 2021, 2020 by perlancar <perlancar@cpan.org>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-SubtitleUtils>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=cut

